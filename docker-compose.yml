version: '3.8'

services:
  api:
    build:
      context: .
      target: ${ENVIRONMENT:-development}
      args:
        ENVIRONMENT: ${ENVIRONMENT:-development}
    environment:
      - PYTHONPATH=/app/src
      - FLASK_APP=flask_structured_api.factory:create_flask_app()
    ports:
      - "${API_PORT:-5000}:${API_PORT:-5000}"
      - "${DEBUGPY_PORT:-5678}:${DEBUGPY_PORT:-5678}"
    env_file: .env
    volumes:
      # Mount the entire project directory
      - .:/app:cached
      # Mount these as separate volumes to ensure persistence
      - migrations:/app/migrations
      - backup_data:/backups
    entrypoint: ["/bin/sh", "/app/docker/api/entrypoint.sh"]
    networks:
      - app_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  db:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-api}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network
    tmpfs:
      - /tmp:exec,size=1G
    command: postgres -c temp_buffers=32MB -c work_mem=32MB -c maintenance_work_mem=128MB

  backup:
    build:
      context: .
      target: backup
    volumes:
      - backup_data:/backups:cached
    environment:
      - PYTHONPATH=/app/src
      - POSTGRES_HOST=db
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-api}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-@daily}
    networks:
      - app_network
    depends_on:
      db:
        condition: service_healthy
    tmpfs:
      - /tmp:exec,size=1G

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --bind 0.0.0.0 --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

volumes:
  postgres_data:
  backup_data:
    driver: local
  redis_data:
  api_src:
    driver: local
  migrations:
    driver: local

networks:
  app_network:
    driver: bridge
